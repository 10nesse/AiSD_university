# -*- coding: utf-8 -*-
"""homework_16_02_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16QjjFATv8XNo93LVclphuynFhFxi7TQz
"""

class Length:
    def __init__(self, value, unit):
        self.__value = value
        self.__unit = unit

    def __str__(self):
        return f'Length({self.__value} {self.__unit})'

    def __getLength(self):
        return str(self.__value)+self.__unit

    def __setUnit(self, unit):
        correct = ['см', 'м', 'км']
        previous_unit = self.__unit
        if unit in correct:
            self.__unit = unit
            if previous_unit == 'м' and self.__unit == 'см':
                self.__value = self.__value * 100
            elif previous_unit == 'см' and self.__unit == 'м':
                self.__value = self.__value / 100
            elif previous_unit == 'км' and self.__unit == 'м':
                self.__value = self.__value * 1000
            elif previous_unit == 'м' and self.__unit == 'км':
                self.__value = self.__value / 1000
            elif previous_unit == 'см' and self.__unit == 'км':
                self.__value = self.__value / 100000
            elif previous_unit == 'км' and self.__unit == 'см':
                self.__value = self.__value * 100000

        else:
            raise ValueError("Неверная единица измерения")

    value = property(__getLength, __setUnit)


table = Length(1, 'км') # создаем объект
print(table.value) # __getLenght
table.value = 'см' # __setUnit
print(table.value) # __getLenght

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


    def __str__(self):
        return f"Point({self.x}, {self.y})"

class Rect:
    def __init__(self, top_left, bottom_right):
        self.A = top_left
        self.C = bottom_right
      

    def __str__(self):
        return f"Rect({self.A}, {self.C})"

    def sides(self):
        return abs(self.C.x - self.A.x), abs(self.A.y - self.C.y)

    def perim(self):
        a, b = self.sides()
        return 2*(a+b)


point_1 = Point(0,5) # создаем объект 
point_2 = Point(5,0) # создаем объект
print(point_1) # проверяем метод __str__()
print()

rectangle = Rect(point_1,point_2) # создаем объект
print(rectangle) # проверяем метод __str__()
print(rectangle.sides()) # вызываем метод sides() 
print(rectangle.perim()) # вызываем метод perim()

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def __str__(self):
        return f'Point({self.x},{self.y})'

point_1 = Point(0,6) # создаем объект
point_2 = Point(6,0) # создаем объект 
point_3 = Point(1,0) # создаем объект

class Triangle:

    def __init__(self, A, B, C):
        self.A = A
        self.B = B
        self.C = C  

    def __str__(self):
        return f'Triangle({self.A},{self.B},{self.C})'

    def sides(self):
        AB = ((self.A.x-self.B.x)**2 + (self.A.y-self.B.y)**2)**0.5
        BC = ((self.B.x-self.C.x)**2 + (self.B.y-self.C.y)**2)**0.5
        AC = ((self.A.x-self.C.x)**2 + (self.A.y-self.C.y)**2)**0.5
        return AB, BC, AC


    def perim(self):
        a, b, c = self.sides()
        return a+b+c

    def square(self):
        a, b, c = self.sides()
        p = (a+b+c)/2
        s = (p*(p-a)*(p-b)*(p-c))**0.5
        return s 



triangle = Triangle(point_1, point_2, point_3) # создаем объект 
print(triangle) # проверяем метод __str__()
print(triangle.sides()) # вызываем метод sides() 
print(triangle.perim()) # вызываем метод perim() 
print(triangle.square()) # вызываем метод square()