# -*- coding: utf-8 -*-
"""homework_9_03_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CxryT85uNQbj6IhnKjCAjHMVCshFXeUx

#Иерархия классов для фруктов
"""

class Fruit:
    count = 0

    def __init__(self, name, weight):
        Fruit.count += 1
        self.name = name
        self.weight = weight
        self.id = Fruit.count

    def __str__(self):
        return f"{self.name} ({self.weight} г), id: {self.id}"


    def get_name(self):
        return self.name

    def get_weight(self):
        return self.weight   

class Apple(Fruit):
    def __init__(self, name, weight, variety):
        super().__init__(name, weight)
        self.variety = variety

    def get_description(self):
        return f"{self.variety} яблоко {self.name} ({self.weight} г)"

    def make_cider(self):
        if self.variety == "Антоновка" and self.weight >= 500:
            self.weight -= 500
            return "яблочный сидр"
        else:
            return None
        


class Orange(Fruit):
    def __init__(self, name, weight, country):
        super().__init__(name, weight)
        self.country = country

    def get_description(self):
        return f"{self.country} апельсин {self.name} ({self.weight} г)"

    def peel(self):
        if self.weight >= 100:
            self.weight -= 100
            return f"Мякоть апельсина {self.name}"
        else:
            return None


class Banana(Fruit):
    def __init__(self, name, weight, ripeness):
        super().__init__(name, weight)
        self.ripeness = ripeness

    def get_description(self):
        return f"Банан {self.name} ({self.weight} г), {self.ripeness}"

    def peel(self):
        if self.weight >= 50:
            self.weight -= 50
            return f"{self.name} без кожуры"
        else:
            return None


class Lemon(Fruit):
    def __init__(self, name, weight, acidity):
        super().__init__(name, weight)
        self.acidity = acidity

    def get_description(self):
        return f"Лимон {self.name} ({self.weight} г)"

    def squeeze(self):
        if self.weight >= 50:
            self.weight -= 50
            return f"Лимонный сок {self.name}"
        else:
            return None


fruits = [
    Apple('Голден', 1000, 'Антоновка'),
    Orange('Фемми',120, 'Абхазия'),
    Banana('Монке', 300, 44),
    Lemon('Маэстро',500, 90),
    Apple('Илья', 800, 'Богатырь'),
    Orange('Тру',600, 'Испания'),
    Banana('Джанке', 100, 75),
    Lemon('Бергамот',200, 50),
    Apple('Мак',100, 'Макинтош'),
    Orange('Фейм',700, 'Португалия'),
    Banana('Чемпион',400, 90),
    Lemon('Лагер',300, 60)]


for fruit in fruits:
    print(fruit.get_description())
    print(f"ID: {fruit.id}")
    print("="*50)   



apple1 = Apple('Голден', 1000, 'Антоновка')
print(apple1.make_cider())

orange1 = Orange('Фемми',120, 'Абхазия')
print(orange1.peel())

banana1 = Banana('Монке', 300, 44)
print(banana1.peel())

lemon1 = Lemon('Маэстро',500, 90)
print(lemon1.squeeze())

class Fruit:
    count = 0

    def __init__(self, name, weight):
        Fruit.count += 1
        self.name = name
        self.weight = weight
        self.id = Fruit.count

    def __str__(self):
        return f"{self.name} ({self.weight} г), id: {self.id}"


    def get_name(self):
        return self.name

    def get_weight(self):
        return self.weight   

class Apple(Fruit):
    def __init__(self, name, weight, variety):
        super().__init__(name, weight)
        self.variety = variety

    def get_description(self):
        return f"{self.variety} яблоко {self.name} ({self.weight} г)"

    def make_cider(self):
        if self.variety == "Антоновка" and self.weight >= 500:
            self.weight -= 500
            return "яблочный сидр"
        else:
            return None
        


class Orange(Fruit):
    def __init__(self, name, weight, country):
        super().__init__(name, weight)
        self.country = country

    def get_description(self):
        return f"{self.country} апельсин {self.name} ({self.weight} г)"

    def peel(self):
        if self.weight >= 100:
            self.weight -= 100
            return f"Мякоть апельсина {self.name}"
        else:
            return None


class Banana(Fruit):
    def __init__(self, name, weight, ripeness):
        super().__init__(name, weight)
        self.ripeness = ripeness

    def get_description(self):
        return f"банан {self.name} ({self.weight} г), {self.ripeness}"

    def peel(self):
        if self.weight >= 50:
            self.weight -= 50
            return f"{self.name} без кожуры"
        else:
            return None


class Lemon(Fruit):
    def __init__(self, name, weight, acidity):
        super().__init__(name, weight)
        self.acidity = acidity

    def get_description(self):
        return f"Лимон {self.name} ({self.weight} г)"

    def squeeze(self):
        if self.weight >= 50:
            self.weight -= 50
            return f"Лимонный сок {self.name}"
        else:
            return None


fruits = [
    Apple(1000, 'Антоновка'),
    Orange(120, 'Абхазия'),
    Banana(300, 44),
    Lemon(500, 90),
    Apple(800, 'Богатырь'),
    Orange(600, 'Испания'),
    Banana(100, 75),
    Lemon(200, 50),
    Apple(100, 'Макинтощ'),
    Orange(700, 'Португалия'),
    Banana(400, 90),
    Lemon(300, 60)]

for fruit in fruits:
    print(fruit.id, fruit.get_name(), fruit.get_weight())