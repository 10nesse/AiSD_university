# -*- coding: utf-8 -*-
"""homework_16_03_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kC54OGBJ9_eTmDpDzy7LNBstsOlFtEj3

####1.* Реализовать функцию, принимающую на вход итерируемый объект функций и возвращающую словарь, в котором ключ — это первое слово из аннотации функции, а значение – ссылка на функцию.
"""

def square(x) -> 'square аннотация':
    return x ** 2

def cube(x) -> 'cube аннотация':
    return x ** 3

def absolute_value(x) -> 'abs аннотация':
    return abs(x)



functions = [square, cube, absolute_value]


def get_functions_annotations_dict(functions):
    functions_dict = {}
    for func in functions:
        func_link = func
        annotation = func.__annotations__.get('return','')
        functions_dict[annotation.split()[0]] = func_link
    return functions_dict


functions_dict = get_functions_annotations_dict(functions)
print(functions_dict)

"""####2. Создать функцию, реализующую REPL для словаря, созданного в задаче 1. Отдельно должен предусматриваться выход из цикла REPL."""

def repl(function_dict):
    while True:
        command = input("Введите команду ('exit' для завершения): ")
        if command == 'exit':
            break
        elif command in function_dict:
            try:
                argument = input("Введите аргумент: ")
                result = function_dict[command](int(argument))
                print(f"Результат: {result}")
            except ValueError:
                print("Ошибка: некорректный аргумент")
        else:
            print("Ошибка: команда не найдена")


repl(functions_dict)

"""####2.1) Доработать REPL из задачи 2 так, чтобы пользователь мог передавать произвольное количество аргументов в функцию (при вводе пользователя аргументы разделяются пробелами)."""

def repl_v2(function_dict):
    while True:
        command = input("Введите команду ('exit' для завершения): ")
        if command == 'exit':
            break
        elif command in function_dict:
            try:
                args = input("Введите аргументы: ")
                kwargs = {}
                if args:
                    for arg in args.split():
                        name, value = arg.split('=')
                        kwargs[name] = int(value)
                result = function_dict[command](**kwargs) # вызов функции comand с аргументами kwags
                print(f"Результат: {result}")
            except (ValueError, TypeError) as e:
                print(f"Ошибка: {e}")
        else:
            print("Ошибка: команда не найдена")


repl_v2(functions_dict)

"""####3. Реализовать функцию подсчета n-го числа Фибоначчи с помощью хвостовой рекурсии."""

# Числа Фибоначчи: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55
# Номер числа:     0, 1, 2, 3, 4, 5, 6, 7,  8,  9,  10

def fib_tail(n, a=0, b=1):
    if n == 0:
        return a
    elif n == 1:
        return b
    else:
        return fib_tail(n - 1, b, a + b)
fib_tail(6)